#[version = "0.0.5"]
def @main(%voxels: Tensor[(20000, 32, 10), float32] /* ty=Tensor[(20000, 32, 10), float32] */, %voxel_idxs: Tensor[(20000, 4), int32] /* ty=Tensor[(20000, 4), int32] */, %voxel_num: Tensor[(1), int32] /* ty=Tensor[(1), int32] */) -> (Tensor[(1, 200, 552, 72), float32], Tensor[(1, 200, 552, 84), float32], Tensor[(1, 200, 552, 24), float32]) {
  %0 = reshape(%voxels, newshape=[-1, 10]) /* ty=Tensor[(640000, 10), float32] */;
  %1 = cast(%0, dtype="float16") /* ty=Tensor[(640000, 10), float16] */;
  %2 = nn.dense(%1, meta[relay.Constant][0] /* ty=Tensor[(32, 10), float16] */, units=None, out_dtype="float32") /* ty=Tensor[(640000, 32), float32] */;
  %3 = reshape(%2, newshape=[20000, 32, 32]) /* ty=Tensor[(20000, 32, 32), float32] */;
  %4 = transpose(%3, axes=[0, 2, 1]) /* ty=Tensor[(20000, 32, 32), float32] */;
  %5 = multiply(%4, meta[relay.Constant][1] /* ty=Tensor[(32, 1), float32] */) /* ty=Tensor[(20000, 32, 32), float32] */;
  %6 = add(%5, meta[relay.Constant][2] /* ty=Tensor[(32, 1), float32] */) /* ty=Tensor[(20000, 32, 32), float32] */;
  %7 = transpose(%6, axes=[0, 2, 1]) /* ty=Tensor[(20000, 32, 32), float32] */;
  %8 = nn.relu(%7) /* ty=Tensor[(20000, 32, 32), float32] */;
  %9 = max(%8, axis=[1], keepdims=True) /* ty=Tensor[(20000, 1, 32), float32] */;
  %10 = tile(%9, reps=[1, 32, 1]) /* ty=Tensor[(20000, 32, 32), float32] */;
  %11 = (%8, %10) /* ty=(Tensor[(20000, 32, 32), float32], Tensor[(20000, 32, 32), float32]) */;
  %12 = concatenate(%11, axis=2) /* ty=Tensor[(20000, 32, 64), float32] */;
  %13 = reshape(%12, newshape=[-1, 64]) /* ty=Tensor[(640000, 64), float32] */;
  %14 = cast(%13, dtype="float16") /* ty=Tensor[(640000, 64), float16] */;
  %15 = nn.dense(%14, meta[relay.Constant][3] /* ty=Tensor[(64, 64), float16] */, units=None, out_dtype="float32") /* ty=Tensor[(640000, 64), float32] */;
  %16 = reshape(%15, newshape=[20000, 32, 64]) /* ty=Tensor[(20000, 32, 64), float32] */;
  %17 = transpose(%16, axes=[0, 2, 1]) /* ty=Tensor[(20000, 64, 32), float32] */;
  %18 = multiply(%17, meta[relay.Constant][4] /* ty=Tensor[(64, 1), float32] */) /* ty=Tensor[(20000, 64, 32), float32] */;
  %19 = add(%18, meta[relay.Constant][5] /* ty=Tensor[(64, 1), float32] */) /* ty=Tensor[(20000, 64, 32), float32] */;
  %20 = transpose(%19, axes=[0, 2, 1]) /* ty=Tensor[(20000, 32, 64), float32] */;
  %21 = nn.relu(%20) /* ty=Tensor[(20000, 32, 64), float32] */;
  %22 = max(%21, axis=[1], keepdims=True) /* ty=Tensor[(20000, 1, 64), float32] */;
  %23 = squeeze(%22, axis=[1]) /* ty=Tensor[(20000, 64), float32] */;
  %24 = ailice.pillar_scatter(%23, %voxel_idxs, %voxel_num, featureX=200, featureY=552) /* ty=Tensor[(1, 64, 200, 552), float32] */;
  %25 = layout_transform(%24, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %26 = cast(%25, dtype="float16") /* ty=Tensor[(1, 200, 552, 64), float16] */;
  %27 = nn.conv2d(%26, meta[relay.Constant][6] /* ty=Tensor[(3, 3, 64, 64), float16] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 552, 64), float16] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %29 = add(%28, meta[relay.Constant][7] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %30 = nn.relu(%29) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %31 = multiply(%30, 16f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %32 = round(%31) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %33 = clip(%32, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %34 = cast(%33, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %35 = ailice.qnn.conv2d(%34, meta[relay.Constant][8] /* ty=Tensor[(3, 3, 64, 64), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %36 = add(%35, 32 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %37 = right_shift(%36, 6 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %38 = clip(%37, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %39 = cast(%38, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %41 = multiply(%40, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %42 = add(%41, meta[relay.Constant][9] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %43 = nn.relu(%42) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %44 = multiply(%43, 16f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %45 = round(%44) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %46 = clip(%45, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %47 = cast(%46, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %48 = ailice.qnn.conv2d(%47, meta[relay.Constant][10] /* ty=Tensor[(3, 3, 64, 64), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %49 = add(%48, 128 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %50 = right_shift(%49, 8 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %51 = clip(%50, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %52 = cast(%51, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %54 = multiply(%53, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %55 = add(%54, meta[relay.Constant][11] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %56 = nn.relu(%55) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %57 = multiply(%56, 16f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %58 = round(%57) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %59 = clip(%58, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %60 = cast(%59, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %61 = ailice.qnn.conv2d(%60, meta[relay.Constant][12] /* ty=Tensor[(3, 3, 64, 64), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %62 = add(%61, 128 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %63 = right_shift(%62, 8 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %64 = clip(%63, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 64), int32] */;
  %65 = cast(%64, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %66 = cast(%65, dtype="float32") /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %67 = multiply(%66, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %68 = add(%67, meta[relay.Constant][13] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %69 = nn.relu(%68) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %70 = multiply(%69, 16f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %71 = round(%70) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %72 = clip(%71, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 64), float32] */;
  %73 = cast(%72, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %74 = ailice.qnn.conv2d_transpose(%73, meta[relay.Constant][14] /* ty=Tensor[(1, 1, 64, 128), int8] */, channels=128, kernel_size=[1, 1], padding=[0, 0, 0, 0], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %75 = add(%74, 8 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %76 = right_shift(%75, 4 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %77 = expand_dims(meta[relay.Constant][15] /* ty=Tensor[(128, 1, 1), int32] */, axis=0) /* ty=Tensor[(1, 128, 1, 1), int32] */;
  %78 = clip(%76, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %79 = layout_transform(%77, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %80 = multiply(%78, %79) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %81 = add(%80, meta[relay.Constant][16] /* ty=Tensor[(1, 1, 1, 128), int32] */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %82 = nn.relu(%81) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %83 = cast(%72, dtype="int8") /* ty=Tensor[(1, 200, 552, 64), int8] */;
  %84 = ailice.qnn.conv2d(%83, meta[relay.Constant][17] /* ty=Tensor[(3, 3, 64, 64), int8] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %85 = add(%84, 256 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %86 = right_shift(%85, 9 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %87 = clip(%86, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %88 = cast(%87, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %90 = multiply(%89, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %91 = add(%90, meta[relay.Constant][18] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %92 = nn.relu(%91) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %93 = multiply(%92, 16f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %94 = round(%93) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %95 = clip(%94, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %96 = cast(%95, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %97 = ailice.qnn.conv2d(%96, meta[relay.Constant][19] /* ty=Tensor[(3, 3, 64, 64), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %98 = add(%97, 128 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %99 = right_shift(%98, 8 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %100 = clip(%99, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %101 = cast(%100, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %103 = multiply(%102, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %104 = add(%103, meta[relay.Constant][20] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %105 = nn.relu(%104) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %106 = multiply(%105, 16f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %107 = round(%106) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %108 = clip(%107, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %109 = cast(%108, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %110 = ailice.qnn.conv2d(%109, meta[relay.Constant][21] /* ty=Tensor[(3, 3, 64, 64), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %111 = add(%110, 128 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %112 = right_shift(%111, 8 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %113 = clip(%112, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %114 = cast(%113, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %116 = multiply(%115, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %117 = add(%116, meta[relay.Constant][22] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %118 = nn.relu(%117) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %119 = multiply(%118, 16f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %120 = round(%119) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %121 = clip(%120, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %122 = cast(%121, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %123 = ailice.qnn.conv2d(%122, meta[relay.Constant][23] /* ty=Tensor[(3, 3, 64, 64), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %124 = add(%123, 256 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %125 = right_shift(%124, 9 /* ty=int32 */) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %126 = clip(%125, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), int32] */;
  %127 = cast(%126, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %129 = multiply(%128, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %130 = add(%129, meta[relay.Constant][24] /* ty=Tensor[(1, 1, 1, 64), float32] */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %131 = nn.relu(%130) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %132 = multiply(%131, 16f /* ty=float32 */) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %133 = round(%132) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %134 = clip(%133, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 100, 276, 64), float32] */;
  %135 = cast(%134, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %136 = ailice.qnn.conv2d_transpose(%135, meta[relay.Constant][25] /* ty=Tensor[(2, 2, 64, 128), int8] */, channels=128, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %137 = add(%136, 32 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %138 = right_shift(%137, 6 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %139 = expand_dims(meta[relay.Constant][26] /* ty=Tensor[(128, 1, 1), int32] */, axis=0) /* ty=Tensor[(1, 128, 1, 1), int32] */;
  %140 = clip(%138, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %141 = layout_transform(%139, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %142 = multiply(%140, %141) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %143 = add(%142, meta[relay.Constant][27] /* ty=Tensor[(1, 1, 1, 128), int32] */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %144 = nn.relu(%143) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %145 = cast(%134, dtype="int8") /* ty=Tensor[(1, 100, 276, 64), int8] */;
  %146 = ailice.qnn.conv2d(%145, meta[relay.Constant][28] /* ty=Tensor[(3, 3, 64, 128), int8] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %147 = add(%146, 256 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %148 = right_shift(%147, 9 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %149 = clip(%148, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %150 = cast(%149, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %152 = multiply(%151, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %153 = add(%152, meta[relay.Constant][29] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %154 = nn.relu(%153) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %155 = multiply(%154, 16f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %156 = round(%155) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %157 = clip(%156, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %158 = cast(%157, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %159 = ailice.qnn.conv2d(%158, meta[relay.Constant][30] /* ty=Tensor[(3, 3, 128, 128), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %160 = add(%159, 256 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %161 = right_shift(%160, 9 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %162 = clip(%161, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %163 = cast(%162, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %165 = multiply(%164, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %166 = add(%165, meta[relay.Constant][31] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %167 = nn.relu(%166) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %168 = multiply(%167, 16f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %169 = round(%168) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %170 = clip(%169, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %171 = cast(%170, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %172 = ailice.qnn.conv2d(%171, meta[relay.Constant][32] /* ty=Tensor[(3, 3, 128, 128), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %173 = add(%172, 256 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %174 = right_shift(%173, 9 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %175 = clip(%174, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %176 = cast(%175, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %178 = multiply(%177, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %179 = add(%178, meta[relay.Constant][33] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %180 = nn.relu(%179) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %181 = multiply(%180, 16f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %182 = round(%181) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %183 = clip(%182, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %184 = cast(%183, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %185 = ailice.qnn.conv2d(%184, meta[relay.Constant][34] /* ty=Tensor[(3, 3, 128, 128), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %186 = add(%185, 256 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %187 = right_shift(%186, 9 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %188 = clip(%187, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %189 = cast(%188, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %191 = multiply(%190, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %192 = add(%191, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %193 = nn.relu(%192) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %194 = multiply(%193, 16f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %195 = round(%194) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %196 = clip(%195, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %197 = cast(%196, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %198 = ailice.qnn.conv2d(%197, meta[relay.Constant][36] /* ty=Tensor[(3, 3, 128, 128), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %199 = add(%198, 128 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %200 = right_shift(%199, 8 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %201 = clip(%200, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %202 = cast(%201, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %204 = multiply(%203, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %205 = add(%204, meta[relay.Constant][37] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %206 = nn.relu(%205) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %207 = multiply(%206, 16f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %208 = round(%207) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %209 = clip(%208, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %210 = cast(%209, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %211 = ailice.qnn.conv2d(%210, meta[relay.Constant][38] /* ty=Tensor[(3, 3, 128, 128), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %212 = add(%211, 128 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %213 = right_shift(%212, 8 /* ty=int32 */) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %214 = clip(%213, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), int32] */;
  %215 = cast(%214, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %217 = multiply(%216, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %218 = add(%217, meta[relay.Constant][39] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %219 = nn.relu(%218) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %220 = multiply(%219, 16f /* ty=float32 */) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %221 = round(%220) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %222 = clip(%221, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 50, 138, 128), float32] */;
  %223 = cast(%222, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %224 = ailice.qnn.conv2d_transpose(%223, meta[relay.Constant][40] /* ty=Tensor[(4, 4, 128, 128), int8] */, channels=128, kernel_size=[4, 4], strides=[4, 4], padding=[0, 0, 0, 0], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %225 = add(%224, 16 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %226 = right_shift(%225, 5 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %227 = expand_dims(meta[relay.Constant][41] /* ty=Tensor[(128, 1, 1), int32] */, axis=0) /* ty=Tensor[(1, 128, 1, 1), int32] */;
  %228 = clip(%226, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %229 = layout_transform(%227, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %230 = multiply(%228, %229) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %231 = add(%230, meta[relay.Constant][42] /* ty=Tensor[(1, 1, 1, 128), int32] */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %232 = nn.relu(%231) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %233 = cast(%222, dtype="int8") /* ty=Tensor[(1, 50, 138, 128), int8] */;
  %234 = ailice.qnn.conv2d(%233, meta[relay.Constant][43] /* ty=Tensor[(3, 3, 128, 256), int8] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %235 = add(%234, 256 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %236 = right_shift(%235, 9 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %237 = clip(%236, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %238 = cast(%237, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %240 = multiply(%239, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %241 = add(%240, meta[relay.Constant][44] /* ty=Tensor[(1, 1, 1, 256), float32] */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %242 = nn.relu(%241) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %243 = multiply(%242, 16f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %244 = round(%243) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %245 = clip(%244, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %246 = cast(%245, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %247 = ailice.qnn.conv2d(%246, meta[relay.Constant][45] /* ty=Tensor[(3, 3, 256, 256), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %248 = add(%247, 256 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %249 = right_shift(%248, 9 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %250 = clip(%249, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %251 = cast(%250, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %253 = multiply(%252, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %254 = add(%253, meta[relay.Constant][46] /* ty=Tensor[(1, 1, 1, 256), float32] */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %255 = nn.relu(%254) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %256 = multiply(%255, 16f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %257 = round(%256) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %258 = clip(%257, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %259 = cast(%258, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %260 = ailice.qnn.conv2d(%259, meta[relay.Constant][47] /* ty=Tensor[(3, 3, 256, 256), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %261 = add(%260, 256 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %262 = right_shift(%261, 9 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %263 = clip(%262, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %264 = cast(%263, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %266 = multiply(%265, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %267 = add(%266, meta[relay.Constant][48] /* ty=Tensor[(1, 1, 1, 256), float32] */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %268 = nn.relu(%267) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %269 = multiply(%268, 16f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %270 = round(%269) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %271 = clip(%270, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %272 = cast(%271, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %273 = ailice.qnn.conv2d(%272, meta[relay.Constant][49] /* ty=Tensor[(3, 3, 256, 256), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %274 = add(%273, 256 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %275 = right_shift(%274, 9 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %276 = clip(%275, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %277 = cast(%276, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %279 = multiply(%278, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %280 = add(%279, meta[relay.Constant][50] /* ty=Tensor[(1, 1, 1, 256), float32] */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %281 = nn.relu(%280) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %282 = multiply(%281, 16f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %283 = round(%282) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %284 = clip(%283, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %285 = cast(%284, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %286 = ailice.qnn.conv2d(%285, meta[relay.Constant][51] /* ty=Tensor[(3, 3, 256, 256), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %287 = add(%286, 128 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %288 = right_shift(%287, 8 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %289 = clip(%288, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %290 = cast(%289, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %291 = cast(%290, dtype="float32") /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %292 = multiply(%291, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %293 = add(%292, meta[relay.Constant][52] /* ty=Tensor[(1, 1, 1, 256), float32] */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %294 = nn.relu(%293) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %295 = multiply(%294, 16f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %296 = round(%295) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %297 = clip(%296, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %298 = cast(%297, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %299 = ailice.qnn.conv2d(%298, meta[relay.Constant][53] /* ty=Tensor[(3, 3, 256, 256), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %300 = add(%299, 64 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %301 = right_shift(%300, 7 /* ty=int32 */) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %302 = clip(%301, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), int32] */;
  %303 = cast(%302, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %305 = multiply(%304, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %306 = add(%305, meta[relay.Constant][54] /* ty=Tensor[(1, 1, 1, 256), float32] */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %307 = nn.relu(%306) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %308 = multiply(%307, 16f /* ty=float32 */) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %309 = round(%308) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %310 = clip(%309, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 69, 256), float32] */;
  %311 = cast(%310, dtype="int8") /* ty=Tensor[(1, 25, 69, 256), int8] */;
  %312 = ailice.qnn.conv2d_transpose(%311, meta[relay.Constant][55] /* ty=Tensor[(8, 8, 256, 128), int8] */, channels=128, kernel_size=[8, 8], strides=[8, 8], padding=[0, 0, 0, 0], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %313 = add(%312, 8 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %314 = right_shift(%313, 4 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %315 = expand_dims(meta[relay.Constant][56] /* ty=Tensor[(128, 1, 1), int32] */, axis=0) /* ty=Tensor[(1, 128, 1, 1), int32] */;
  %316 = clip(%314, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %317 = layout_transform(%315, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %318 = multiply(%316, %317) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %319 = add(%318, meta[relay.Constant][57] /* ty=Tensor[(1, 1, 1, 128), int32] */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %320 = nn.relu(%319) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %321 = left_shift(%82, 16 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %322 = left_shift(%144, 15 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %323 = left_shift(%232, 16 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %324 = left_shift(%320, 15 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 128), int32] */;
  %325 = (%321, %322, %323, %324) /* ty=(Tensor[(1, 200, 552, 128), int32], Tensor[(1, 200, 552, 128), int32], Tensor[(1, 200, 552, 128), int32], Tensor[(1, 200, 552, 128), int32]) */;
  %326 = concatenate(%325, axis=3) /* ty=Tensor[(1, 200, 552, 512), int32] */;
  %327 = add(%326, 8388608 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 512), int32] */;
  %328 = right_shift(%327, 24 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 512), int32] */;
  %329 = clip(%328, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 512), int32] */;
  %330 = cast(%329, dtype="int8") /* ty=Tensor[(1, 200, 552, 512), int8] */;
  %331 = ailice.qnn.conv2d(%330, meta[relay.Constant][58] /* ty=Tensor[(1, 1, 512, 72), int8] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 72), int32] */;
  %332 = add(%331, 4 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 72), int32] */;
  %333 = right_shift(%332, 3 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 72), int32] */;
  %334 = clip(%333, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 72), int32] */;
  %335 = cast(%334, dtype="int8") /* ty=Tensor[(1, 200, 552, 72), int8] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(1, 200, 552, 72), float32] */;
  %337 = multiply(%336, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 72), float32] */;
  %338 = cast(%329, dtype="int8") /* ty=Tensor[(1, 200, 552, 512), int8] */;
  %339 = ailice.qnn.conv2d(%338, meta[relay.Constant][60] /* ty=Tensor[(1, 1, 512, 84), int8] */, padding=[0, 0, 0, 0], channels=84, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 84), int32] */;
  %340 = add(%339, 16 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 84), int32] */;
  %341 = right_shift(%340, 5 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 84), int32] */;
  %342 = clip(%341, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 84), int32] */;
  %343 = cast(%342, dtype="int8") /* ty=Tensor[(1, 200, 552, 84), int8] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(1, 200, 552, 84), float32] */;
  %345 = multiply(%344, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 84), float32] */;
  %346 = cast(%329, dtype="int8") /* ty=Tensor[(1, 200, 552, 512), int8] */;
  %347 = ailice.qnn.conv2d(%346, meta[relay.Constant][62] /* ty=Tensor[(1, 1, 512, 24), int8] */, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 200, 552, 24), int32] */;
  %348 = add(%347, 4 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 24), int32] */;
  %349 = right_shift(%348, 3 /* ty=int32 */) /* ty=Tensor[(1, 200, 552, 24), int32] */;
  %350 = clip(%349, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 200, 552, 24), int32] */;
  %351 = cast(%350, dtype="int8") /* ty=Tensor[(1, 200, 552, 24), int8] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(1, 200, 552, 24), float32] */;
  %353 = multiply(%352, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 200, 552, 24), float32] */;
  %354 = add(%337, meta[relay.Constant][59] /* ty=Tensor[(1, 1, 1, 72), float32] */) /* ty=Tensor[(1, 200, 552, 72), float32] */;
  %355 = add(%345, meta[relay.Constant][61] /* ty=Tensor[(1, 1, 1, 84), float32] */) /* ty=Tensor[(1, 200, 552, 84), float32] */;
  %356 = add(%353, meta[relay.Constant][63] /* ty=Tensor[(1, 1, 1, 24), float32] */) /* ty=Tensor[(1, 200, 552, 24), float32] */;
  (%354, %355, %356) /* ty=(Tensor[(1, 200, 552, 72), float32], Tensor[(1, 200, 552, 84), float32], Tensor[(1, 200, 552, 24), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */